<testset xmlns="http://cpee.org/ns/properties/2.0">
  <executionhandler>ruby</executionhandler>
  <dataelements>
    <current_player/>
    <player_data/>
    <current_event/>
    <game_state/>
    <round/>
    <terrain_pieces/>
    <expand_rows/>
    <expand_cols/>
    <rotate_terrain_id/>
    <current_terrain/>
    <direction>[]</direction>
    <robot_active>false</robot_active>
    <end_game>false</end_game>
    <rotate_needed>false</rotate_needed>
    <expand_needed>false</expand_needed>
    <grid_template>[[{"global":[1,1],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[1,2],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[1,3],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[1,4],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[1,5],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[1,6],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[1,7],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[1,8],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[1,9],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[1,10],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[1,11],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[1,12],"terrainID":null,"occupied":false,"effect":null,"exit":false}],[{"global":[2,1],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[2,2],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[2,3],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[2,4],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[2,5],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[2,6],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[2,7],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[2,8],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[2,9],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[2,10],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[2,11],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[2,12],"terrainID":null,"occupied":false,"effect":null,"exit":false}],[{"global":[3,1],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[3,2],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[3,3],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[3,4],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[3,5],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[3,6],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[3,7],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[3,8],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[3,9],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[3,10],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[3,11],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[3,12],"terrainID":null,"occupied":false,"effect":null,"exit":false}],[{"global":[4,1],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[4,2],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[4,3],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[4,4],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[4,5],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[4,6],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[4,7],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[4,8],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[4,9],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[4,10],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[4,11],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[4,12],"terrainID":null,"occupied":false,"effect":null,"exit":false}],[{"global":[5,1],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[5,2],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[5,3],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[5,4],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[5,5],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[5,6],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[5,7],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[5,8],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[5,9],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[5,10],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[5,11],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[5,12],"terrainID":null,"occupied":false,"effect":null,"exit":false}],[{"global":[6,1],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[6,2],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[6,3],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[6,4],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[6,5],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[6,6],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[6,7],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[6,8],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[6,9],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[6,10],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[6,11],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[6,12],"terrainID":null,"occupied":false,"effect":null,"exit":false}],[{"global":[7,1],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[7,2],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[7,3],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[7,4],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[7,5],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[7,6],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[7,7],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[7,8],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[7,9],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[7,10],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[7,11],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[7,12],"terrainID":null,"occupied":false,"effect":null,"exit":false}],[{"global":[8,1],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[8,2],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[8,3],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[8,4],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[8,5],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[8,6],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[8,7],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[8,8],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[8,9],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[8,10],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[8,11],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[8,12],"terrainID":null,"occupied":false,"effect":null,"exit":false}],[{"global":[9,1],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[9,2],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[9,3],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[9,4],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[9,5],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[9,6],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[9,7],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[9,8],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[9,9],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[9,10],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[9,11],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[9,12],"terrainID":null,"occupied":false,"effect":null,"exit":false}],[{"global":[10,1],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[10,2],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[10,3],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[10,4],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[10,5],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[10,6],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[10,7],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[10,8],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[10,9],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[10,10],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[10,11],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[10,12],"terrainID":null,"occupied":false,"effect":null,"exit":false}],[{"global":[11,1],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[11,2],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[11,3],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[11,4],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[11,5],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[11,6],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[11,7],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[11,8],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[11,9],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[11,10],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[11,11],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[11,12],"terrainID":null,"occupied":false,"effect":null,"exit":false}],[{"global":[12,1],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[12,2],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[12,3],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[12,4],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[12,5],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[12,6],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[12,7],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[12,8],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[12,9],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[12,10],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[12,11],"terrainID":null,"occupied":false,"effect":null,"exit":false},{"global":[12,12],"terrainID":null,"occupied":false,"effect":null,"exit":false}]]</grid_template>
    <terrains>[{"id":"A","rotation":0,"home":11,"placement":0,"cells":[[{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false}],[{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false}],[{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":true}],[{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":true},{"global":null,"effect":null,"occupied":false,"exit":false}]],"horizontal_walls":[[1,0,0,0,1],[1,1,0,0,1],[1,1,0,0,0],[1,0,0,1,1]],"vertical_walls":[[1,0,0,0,1],[1,1,1,1,1],[1,1,0,1,0],[1,0,1,0,1]]},{"id":"B","rotation":0,"home":12,"placement":0,"cells":[[{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false}],[{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":true}],[{"global":null,"effect":null,"occupied":false,"exit":true},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false}],[{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":true},{"global":null,"effect":null,"occupied":false,"exit":false}]],"horizontal_walls":[[1,0,1,0,1],[1,0,0,0,0],[0,0,1,0,1],[1,0,1,1,1]],"vertical_walls":[[1,0,0,0,1],[1,0,1,0,1],[1,0,0,0,0],[1,0,1,0,1]]},{"id":"C","rotation":0,"home":13,"placement":0,"cells":[[{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false}],[{"global":null,"effect":null,"occupied":false,"exit":true},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false}],[{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":"wizardE","occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false}],[{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":true},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false}]],"horizontal_walls":[[1,0,0,0,1],[0,1,0,0,1],[1,1,1,1,1],[1,0,1,0,1]],"vertical_walls":[[1,0,1,0,1],[1,0,0,0,0],[1,0,1,0,1],[1,0,0,0,1]]},{"id":"D","rotation":0,"home":21,"placement":0,"cells":[[{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":true},{"global":null,"effect":null,"occupied":false,"exit":false}],[{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":true}],[{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false}],[{"global":null,"effect":"barbarianE","occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":true},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false}]],"horizontal_walls":[[1,0,0,0,1],[1,0,1,0,0],[1,1,1,0,1],[1,1,0,1,1]],"vertical_walls":[[1,1,0,0,1],[1,0,1,0,0],[0,0,0,0,1],[1,0,0,0,1]]},{"id":"E","rotation":0,"home":22,"placement":0,"cells":[[{"global":null,"effect":"barbarianS","occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":true},{"global":null,"effect":"clericS","occupied":false,"exit":false}],[{"global":null,"effect":null,"occupied":false,"exit":true},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false}],[{"global":null,"effect":"rogueS","occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":true}],[{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":true},{"global":null,"effect":"wizardS","occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false}]],"horizontal_walls":[[1,0,1,1,1],[0,0,0,0,1],[1,1,0,0,0],[1,0,1,1,1]],"vertical_walls":[[1,0,1,0,1],[1,0,0,0,0],[0,0,0,0,1],[1,0,0,0,1]]},{"id":"F","rotation":0,"home":23,"placement":0,"cells":[[{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":true},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false}],[{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false}],[{"global":null,"effect":null,"occupied":false,"exit":true},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false}],[{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":true},{"global":null,"effect":null,"occupied":false,"exit":false}]],"horizontal_walls":[[1,0,0,0,1],[1,1,0,1,1],[0,0,0,0,1],[1,0,0,1,1]],"vertical_walls":[[1,0,1,1,1],[0,1,0,0,1],[1,0,1,0,0],[1,0,1,0,1]]},{"id":"G","rotation":0,"home":31,"placement":0,"cells":[[{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":true},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false}],[{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":"clericE","occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false}],[{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":true}],[{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false}]],"horizontal_walls":[[1,0,1,1,1],[1,0,1,0,1],[1,1,0,1,0],[1,0,1,0,1]],"vertical_walls":[[1,0,0,0,1],[0,0,1,0,1],[1,0,0,1,1],[1,0,0,0,1]]},{"id":"H","rotation":0,"home":32,"placement":0,"cells":[[{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":true},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false}],[{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":true}],[{"global":null,"effect":null,"occupied":false,"exit":true},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false}],[{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false}]],"horizontal_walls":[[1,0,0,1,1],[1,1,1,0,0],[0,1,0,0,1],[1,0,1,0,1]],"vertical_walls":[[1,0,1,0,1],[0,0,0,0,1],[1,0,1,1,1],[1,0,0,0,1]]},{"id":"I","rotation":0,"home":33,"placement":0,"cells":[[{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":true},{"global":null,"effect":"rogueE","occupied":false,"exit":false}],[{"global":null,"effect":null,"occupied":false,"exit":true},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false}],[{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false}],[{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false},{"global":null,"effect":null,"occupied":false,"exit":false}]],"horizontal_walls":[[1,0,0,1,1],[0,1,0,1,1],[1,0,1,0,1],[1,0,0,0,1]],"vertical_walls":[[1,0,0,0,1],[1,1,0,1,1],[0,0,1,0,1],[1,0,0,0,1]]}]</terrains>
    <character_template>[{"id":"barbarian","hp":50,"max_hp":50,"ac":14,"init_bonus":2,"initiative":null,"movement":3,"symbol":"square","first_turn":true,"position":null,"effect":null,"STR":16,"DEX":14,"CON":14,"INT":8,"WIS":12,"CHA":10},{"id":"cleric","hp":33,"max_hp":33,"ac":17,"init_bonus":2,"initiative":null,"movement":2,"symbol":"pentagon","first_turn":true,"position":null,"effect":null,"STR":14,"DEX":8,"CON":12,"INT":10,"WIS":17,"CHA":14},{"id":"rogue","hp":33,"max_hp":33,"ac":16,"init_bonus":5,"initiative":null,"movement":4,"symbol":"triangle","first_turn":true,"position":null,"effect":null,"STR":10,"DEX":18,"CON":13,"INT":14,"WIS":12,"CHA":10},{"id":"wizard","hp":26,"max_hp":26,"ac":15,"init_bonus":2,"initiative":null,"movement":3,"symbol":"circle","first_turn":true,"position":null,"effect":null,"STR":8,"DEX":14,"CON":12,"INT":18,"WIS":14,"CHA":10}]</character_template>
    <events>[{"id":0,"name":"You are safe!","description":"You may continue your turn. For now...","dc":null,"dice":null,"effect":"none","on_success":null,"on_fail":null},{"id":1,"name":"Collapsing Tunnel!","description":"The walls begin to shake and collapse around you! Make a Strength saving throw.","dc":12,"dice":"1d8","effect":"half","on_success":"You brace against the falling rocks and you dodge most of the falling rubble, but a few stones bruise you.","on_fail":"You brace against the falling rocks but a heavy rock strikes you hard, leaving you battered!"},{"id":2,"name":"Flame Trap!","description":"You step on a dislocated pressure plate and jets of flame burst from hidden nozzles! Make an Agility saving throw.","dc":14,"dice":"1d6","effect":"half","on_success":"You roll and dive, narrowly escaping the searing flames! You are grazed by the fire but avoid the worst of it.","on_fail":"You roll and dive, trying to escape the searing flames but they engulf you, leaving painful burns!"},{"id":3,"name":"Needle Trap!","description":"As you pass a narrow hallway, tiny needles fire from hidden holes. Make a Instinct saving throw.","dc":13,"dice":"3d4","effect":"none","on_success":"You twist and dodge gracefully, evading the needles!","on_fail":"You feel sharp pricks as the needles puncture your skin!"},{"id":4,"name":"Poison Trap!","description":"You trip on a wire and trigger a hidden gas trap which releases a cloud of green mist! Make an Finesse saving throw.","dc":15,"dice":"1d10","effect":"half","on_success":"You hold your breath and dart through the mist! You inhale a little poison but resist most of its effects.","on_fail":"You try to hold your breath and dart through the mist but the toxic gas invades your lungs, weakening you!"},{"id":5,"name":"Arcane Rune Trap!","description":"You step on an ancient rune that triggers a magical backlash. Make a Knowledge saving throw.","dc":16,"dice":"2d8","effect":"none","on_success":"You recognize the rune's pattern just in time to shield yourself and deflect its power!","on_fail":"You do not recognize the rune's pattern and the full force of the rune explodes into you, burning your flesh and spirit!"},{"id":6,"name":"The Haunting!","description":"A ghostly song tempts you toward danger. Make a Charisma saving throw.","dc":14,"dice":"1d12","effect":"none","on_success":"You resist the haunting melody, standing your ground!","on_fail":"You are drawn forward helplessly into hidden danger!"},{"id":7,"name":"Healing Potion!","description":"You find a small healing potion. You regain some hit points!","dc":null,"dice":"2d6","effect":"heal","on_success":null,"on_fail":null}]</events>
  </dataelements>
  <endpoints>
    <timeout>https://cpee.org/services/timeout.php</timeout>
    <subprocess>https://cpee.org/flow/start/url/</subprocess>
    <welcome>https://lehre.bpm.in.tum.de/ports/5103/welcome</welcome>
    <playerSetup>https://lehre.bpm.in.tum.de/ports/5103/playerSetup</playerSetup>
    <rotatePiece>https://lehre.bpm.in.tum.de/ports/5103/rotateTerrain</rotatePiece>
    <placePiece>https://lehre.bpm.in.tum.de/ports/5103/placePiece</placePiece>
    <visualizeGame>https://lehre.bpm.in.tum.de/ports/5103/visualizeGame</visualizeGame>
    <startPlayerTurn>https://lehre.bpm.in.tum.de/ports/5103/startPlayerTurn</startPlayerTurn>
    <endPlayerTurn>https://lehre.bpm.in.tum.de/ports/5103/endPlayerTurn</endPlayerTurn>
    <gameEnd>https://lehre.bpm.in.tum.de/ports/5103/end</gameEnd>
  </endpoints>
  <attributes>
    <guarded>none</guarded>
    <modeltype>CPEE</modeltype>
    <theme>extended</theme>
    <guarded_id/>
    <info>gridmaster</info>
    <creator>Christine Ashcreek</creator>
    <author>Christine Ashcreek</author>
    <model_uuid>07d3131b-0efc-448b-ae97-242f046bca68</model_uuid>
    <model_version/>
    <design_dir>Teaching.dir/Prak.dir/TUM-Prak-24-WS.dir/Zeka Dizdar.dir</design_dir>
    <design_stage>development</design_stage>
  </attributes>
  <description>
    <description xmlns="http://cpee.org/ns/description/1.0">
      <manipulate id="a26" label="Reset Data Elements">data.robot_active = false
data.end_game = false
data.rotate_needed = false
data.rotate_terrain_id = nil
data.expand_needed = false
data.direction = []
data.expand_cols = nil
data.expand_rows = nil
data.player_data = nil
data.game_state = nil
data.round = nil
data.current_event = nil
data.current_terrain = nil
data.current_player = nil
data.terrain_pieces = nil</manipulate>
      <manipulate id="a6" label="Set Game Start State">require 'json'

data.terrain_pieces = []

# Rotation helpers
def rotate_matrix(matrix, degrees)
case degrees
  when 0
    matrix
  when 90
    matrix.transpose.map(&amp;:reverse)
  when 180
    matrix.map(&amp;:reverse).reverse
  when 270
    matrix.transpose.reverse
  end
end

def rotate_walls(horizontal, vertical, degrees)
  case degrees
  when 0
    [horizontal, vertical]
  when 90
    [vertical.map(&amp;:reverse), horizontal.reverse]
  when 180
    [horizontal.reverse.map(&amp;:reverse), vertical.reverse.map(&amp;:reverse)]
  when 270
    [vertical.reverse, horizontal.map(&amp;:reverse)]
  end
end

# Parse terrains if needed
terrains = data.terrains
terrains = JSON.parse(terrains) if terrains.is_a?(String)

# Get terrain piece and deep-copy it
tile_data = terrains.find { |t| t["id"] == "E" }
tile = JSON.parse(JSON.generate(tile_data))

# Random rotation and starting placement
tile["placement"] = 22
tile["rotation"] = [0, 90, 180, 270].sample

# Rotate cells and walls
rotated_cells = rotate_matrix(tile["cells"], tile["rotation"])
rotated_horizontal_walls, rotated_vertical_walls = rotate_walls(tile["horizontal_walls"], tile["vertical_walls"], tile["rotation"])

# Update current_terrain
data.current_terrain = {
  "id" =&gt; tile["id"],
  "home" =&gt; tile["home"],
  "rotation" =&gt; tile["rotation"],
  "placement" =&gt; tile["placement"],
  "horizontal_walls" =&gt; rotated_horizontal_walls,
  "vertical_walls" =&gt; rotated_vertical_walls
}

# Add to used terrain list
data.terrain_pieces ||= []
data.terrain_pieces &lt;&lt; data.current_terrain

# Apply to grid
grid = JSON.parse(JSON.generate(data.grid_template))
start_row = 5
start_col = 5

(0..3).each do |r|
  (0..3).each do |c|
    global_pos = [start_row + r, start_col + c]
    rotated_cell = rotated_cells[r][c]
    rotated_cell["global"] = global_pos
    grid_row = global_pos[0] - 1
    grid_col = global_pos[1] - 1
    grid[grid_row][grid_col]["terrainID"] = tile["id"]
    grid[grid_row][grid_col]["effect"] = rotated_cell["effect"]
    grid[grid_row][grid_col]["occupied"] = nil
    grid[grid_row][grid_col]["exit"] = rotated_cell["exit"]
  end
end

# Save to game_state
data.game_state = grid</manipulate>
      <call id="a7" endpoint="welcome">
        <parameters>
          <label>Welcome Players</label>
          <method>:post</method>
          <arguments/>
        </parameters>
        <annotations>
          <_generic/>
          <_timing>
            <_timing_weight/>
            <_timing_avg/>
            <explanations/>
          </_timing>
          <_shifting>
            <_shifting_type>Duration</_shifting_type>
          </_shifting>
          <_context_data_analysis>
            <probes/>
            <ips/>
          </_context_data_analysis>
          <report>
            <url/>
          </report>
          <_notes>
            <_notes_general/>
          </_notes>
        </annotations>
        <documentation>
          <input/>
          <output/>
          <implementation>
            <description/>
          </implementation>
          <code>
            <description/>
          </code>
        </documentation>
      </call>
      <choose mode="exclusive">
        <alternative condition="data.robot_active == true">
          <_probability>
            <_probability_min/>
            <_probability_max/>
            <_probability_avg/>
          </_probability>
          <choose mode="exclusive">
            <alternative condition="data.current_terrain['rotation'] != 0">
              <call id="a3" endpoint="rotatePiece">
                <parameters>
                  <label>Make Robot Rotate Target Tile</label>
                  <method>:post</method>
                  <arguments>
                    <current_terrain>!data.current_terrain</current_terrain>
                  </arguments>
                </parameters>
                <annotations>
                  <_generic/>
                  <_timing>
                    <_timing_weight/>
                    <_timing_avg/>
                    <explanations/>
                  </_timing>
                  <_shifting>
                    <_shifting_type>Duration</_shifting_type>
                  </_shifting>
                  <_context_data_analysis>
                    <probes/>
                    <ips/>
                  </_context_data_analysis>
                  <report>
                    <url/>
                  </report>
                  <_notes>
                    <_notes_general/>
                  </_notes>
                </annotations>
                <documentation>
                  <input/>
                  <output/>
                  <implementation>
                    <description/>
                  </implementation>
                </documentation>
              </call>
              <_probability>
                <_probability_min/>
                <_probability_max/>
                <_probability_avg/>
              </_probability>
            </alternative>
            <otherwise/>
          </choose>
          <call id="a13" endpoint="placePiece">
            <parameters>
              <label>Make Robot Place Target Tile to Grid</label>
              <method>:post</method>
              <arguments>
                <current_terrain>!data.current_terrain</current_terrain>
              </arguments>
            </parameters>
            <annotations>
              <_generic/>
              <_timing>
                <_timing_weight/>
                <_timing_avg/>
                <explanations/>
              </_timing>
              <_shifting>
                <_shifting_type>Duration</_shifting_type>
              </_shifting>
              <_context_data_analysis>
                <probes/>
                <ips/>
              </_context_data_analysis>
              <report>
                <url/>
              </report>
              <_notes>
                <_notes_general/>
              </_notes>
            </annotations>
            <documentation>
              <input/>
              <output/>
              <implementation>
                <description/>
              </implementation>
            </documentation>
          </call>
        </alternative>
        <otherwise>
          <choose mode="exclusive">
            <alternative condition="data.current_terrain['rotation'] != 0">
              <call id="a14" endpoint="rotatePiece">
                <parameters>
                  <label>Rotate Target Tile Message</label>
                  <method>:post</method>
                  <arguments>
                    <current_terrain>!data.current_terrain</current_terrain>
                  </arguments>
                </parameters>
                <annotations>
                  <_generic/>
                  <_timing>
                    <_timing_weight/>
                    <_timing_avg/>
                    <explanations/>
                  </_timing>
                  <_shifting>
                    <_shifting_type>Duration</_shifting_type>
                  </_shifting>
                  <_context_data_analysis>
                    <probes/>
                    <ips/>
                  </_context_data_analysis>
                  <report>
                    <url/>
                  </report>
                  <_notes>
                    <_notes_general/>
                  </_notes>
                </annotations>
                <documentation>
                  <input/>
                  <output/>
                  <implementation>
                    <description/>
                  </implementation>
                </documentation>
              </call>
              <_probability>
                <_probability_min/>
                <_probability_max/>
                <_probability_avg/>
              </_probability>
            </alternative>
            <otherwise/>
          </choose>
          <call id="a10" endpoint="placePiece">
            <parameters>
              <label>Place Target Tile to Grid Message</label>
              <method>:post</method>
              <arguments>
                <current_terrain>!data.current_terrain</current_terrain>
              </arguments>
            </parameters>
            <annotations>
              <_generic/>
              <_timing>
                <_timing_weight/>
                <_timing_avg/>
                <explanations/>
              </_timing>
              <_shifting>
                <_shifting_type>Duration</_shifting_type>
              </_shifting>
              <_context_data_analysis>
                <probes/>
                <ips/>
              </_context_data_analysis>
              <report>
                <url/>
              </report>
              <_notes>
                <_notes_general/>
              </_notes>
            </annotations>
            <documentation>
              <input/>
              <output/>
              <implementation>
                <description/>
              </implementation>
            </documentation>
          </call>
        </otherwise>
      </choose>
      <call id="a1" endpoint="playerSetup">
        <parameters>
          <label>Get Player Data</label>
          <method>:post</method>
          <arguments>
            <game_state>!data.game_state</game_state>
            <character_template>!data.character_template</character_template>
          </arguments>
        </parameters>
        <code>
          <prepare/>
          <finalize output="result">data.player_data = result["players"]
data.game_state = result["game_state"]</finalize>
          <update output="result"/>
          <rescue output="result"/>
        </code>
        <annotations>
          <_generic/>
          <_timing>
            <_timing_weight/>
            <_timing_avg/>
            <explanations/>
          </_timing>
          <_shifting>
            <_shifting_type>Duration</_shifting_type>
          </_shifting>
          <_context_data_analysis>
            <probes/>
            <ips/>
          </_context_data_analysis>
          <report>
            <url/>
          </report>
          <_notes>
            <_notes_general/>
          </_notes>
        </annotations>
        <documentation>
          <input/>
          <output/>
          <implementation>
            <description/>
          </implementation>
          <code>
            <description/>
          </code>
        </documentation>
      </call>
      <manipulate id="a2" label="Set Player Data / Reset Current Tile"># Reset current terrain
data.current_terrain = nil

# Set game parameters
data.round = 0

# Update game_state with player positions
game_state = data.game_state

data.player_data.each do |player|
  row, col = player["position"]
  grid_row = row - 1
  grid_col = col - 1

  # Set the occupied field for the corresponding cell
  game_state[grid_row][grid_col]["occupied"] = player["id"]
end

# Save updated game_state
data.game_state = game_state</manipulate>
      <loop mode="pre_test" condition="data.end_game != true">
        <_probability>
          <_probability_min/>
          <_probability_max/>
          <_probability_avg/>
        </_probability>
        <call id="a8" endpoint="visualizeGame">
          <parameters>
            <label>Visualize Game</label>
            <method>:post</method>
            <arguments>
              <game_state>!data.game_state</game_state>
              <terrain_pieces>!data.terrain_pieces</terrain_pieces>
              <player_data>!data.player_data</player_data>
            </arguments>
          </parameters>
          <annotations>
            <_generic/>
            <_timing>
              <_timing_weight/>
              <_timing_avg/>
              <explanations/>
            </_timing>
            <_shifting>
              <_shifting_type>Duration</_shifting_type>
            </_shifting>
            <_context_data_analysis>
              <probes/>
              <ips/>
            </_context_data_analysis>
            <report>
              <url/>
            </report>
            <_notes>
              <_notes_general/>
            </_notes>
          </annotations>
          <documentation>
            <input/>
            <output/>
            <implementation>
              <description/>
            </implementation>
          </documentation>
        </call>
        <manipulate id="a16" label="Determine Player Turn and Generate Random Event">round_index = data.round % data.player_data.length
data.current_player = data.player_data[round_index]

if data.current_player["first_turn"]
  data.current_event = data.events.find { |e| e["id"] == 0 }
  data.current_player["first_turn"] = false
else
  if rand &lt; 0.6
    possible_events = [1,2,3,4,5,6]
    if data.current_player["hp"] &lt; data.current_player["max_hp"]
      possible_events &lt;&lt; 7
    end

    chosen_id = possible_events.sample
    data.current_event = data.events.find { |e| e["id"] == chosen_id }
  else
    data.current_event = data.events.find { |e| e["id"] == 0 }
  end
end</manipulate>
        <call id="a15" endpoint="startPlayerTurn">
          <parameters>
            <label>Player Turn</label>
            <method>:post</method>
            <arguments>
              <current_player>!data.current_player</current_player>
              <current_event>!data.current_event</current_event>
            </arguments>
          </parameters>
          <code>
            <prepare/>
            <finalize output="result">data.current_player = result["current_player"]</finalize>
            <update output="result"/>
            <rescue output="result"/>
          </code>
          <annotations>
            <_generic/>
            <_timing>
              <_timing_weight/>
              <_timing_avg/>
              <explanations/>
            </_timing>
            <_shifting>
              <_shifting_type>Duration</_shifting_type>
            </_shifting>
            <_context_data_analysis>
              <probes/>
              <ips/>
            </_context_data_analysis>
            <report>
              <url/>
            </report>
            <_notes>
              <_notes_general/>
            </_notes>
          </annotations>
          <documentation>
            <input/>
            <output/>
            <implementation>
              <description/>
            </implementation>
            <code>
              <description/>
            </code>
          </documentation>
        </call>
        <manipulate id="a5" label="Update Player Data"># Fetch the old position from player_data
player_id = data.current_player["id"]
old_position = nil

# Find old position of player in player_data
data.player_data.each do |player|
  if player["id"] == player_id
    old_position = player["position"]
    break
  end
end

# 1. Clear old position in game_state
if old_position
  old_row, old_col = old_position
  data.game_state.each do |row|
    row.each do |cell|
      if cell["global"] == [old_row, old_col]
        cell["occupied"] = nil
      end
    end
  end
end

# 2. Update player_data with new position and HP
new_position = data.current_player["position"]
new_hp = data.current_player["hp"]

data.player_data.delete_if do |player|
  if player["id"] == player_id
    player["position"] = new_position
    player["hp"] = new_hp
    player["effect"] = nil
    new_hp &lt;= 0
  else
    false
  end
end

# 3. Set new position in game_state
if new_position &amp;&amp; new_hp &gt; 0
  new_row, new_col = new_position
  data.game_state.each do |row|
    row.each do |cell|
      if cell["global"] == [new_row, new_col]
        cell["occupied"] = player_id
      end
    end
  end
end

# 4. Check for tile effect at new position and apply it to the player
effect_found = nil
data.game_state.each do |row|
  row.each do |cell|
    if cell["global"] == new_position
      effect_found = cell["effect"]
      break
    end
  end
end

if effect_found
  data.player_data.each do |player|
    if player["id"] == player_id
      player["effect"] = effect_found
    end
  end
end

# 5. Clear current_event and increase the round counter
data.current_event = nil
data.round = data.round + 1</manipulate>
        <manipulate id="a11" label="Does the grid need to expand or terrain need to rotate?">player_pos = data.current_player["position"]

row = player_pos[0]
col = player_pos[1]

cell = data.game_state[row-1][col-1]

if cell["exit"]
  if [1, 12].include?(row) || [1, 12].include?(col)
    terrain_id = cell["terrainID"]
    if terrain_id
      data.rotate_needed = true
      data.rotate_terrain_id = terrain_id
    else
      raise "Error: No terrainID found at player position!"
    end
    data.expand_needed = false
  else
    if [4,5,8,9].include?(row)
      if row == 4
        expansion_rows = (5..8).to_a  # Moving south
        data.direction &lt;&lt; 0
      elsif row == 5
        expansion_rows = (1..4).to_a  # Moving north
        data.direction &lt;&lt; 3    
      elsif row == 8
        expansion_rows = (9..12).to_a # Moving south
        data.direction &lt;&lt; 0
      elsif row == 9
        expansion_rows = (5..8).to_a  # Moving north
        data.direction &lt;&lt; 3
      end

      data.direction &lt;&lt; ((col - 1) % 4)
      if col.between?(1,4)
        expansion_cols = (1..4).to_a
      elsif col.between?(5,8)
        expansion_cols = (5..8).to_a    
      elsif col.between?(9,12)
        expansion_cols = (9..12).to_a
      end

    else    
      data.direction &lt;&lt; ((row - 1) % 4)
      if [4,5,8,9].include?(col)
        if col == 4
          expansion_cols = (5..8).to_a  # Moving east
          data.direction &lt;&lt; 0
        elsif col == 5
          expansion_cols = (1..4).to_a  # Moving west
          data.direction &lt;&lt; 3
        elsif col == 8
          expansion_cols = (9..12).to_a # Moving east
          data.direction &lt;&lt; 0
        elsif col == 9
          expansion_cols = (5..8).to_a  # Moving west
          data.direction &lt;&lt; 3
        end

        if row.between?(1,4)
          expansion_rows = (1..4).to_a
        elsif row.between?(5,8)
          expansion_rows = (5..8).to_a
        elsif row.between?(9,12)
          expansion_rows = (9..12).to_a
        end
      else
        data.expand_needed = false
      end
    end

    empty = true
    expansion_rows&amp;.each do |r|
      expansion_cols&amp;.each do |c|
        cell_to_check = data.game_state[r-1][c-1]
        if cell_to_check["terrainID"]
          empty = false
          break
        end
      end
      break unless empty
    end

    if empty
      data.expand_needed = true
      data.expand_rows = expansion_rows
      data.expand_cols = expansion_cols
    else
      data.expand_needed = false
    end
    data.rotate_needed = false
  end
end</manipulate>
        <choose mode="exclusive">
          <alternative condition="data.expand_needed == true">
            <manipulate id="a4" label="Find Terrain">require 'json'

# ====== Helpers ======

def rotate_matrix(matrix, degrees)
  case degrees
  when 0 then matrix
  when 90 then matrix.transpose.map(&amp;:reverse)
  when 180 then matrix.map(&amp;:reverse).reverse
  when 270 then matrix.transpose.reverse
  end
end

def rotate_walls(horizontal, vertical, degrees)
  case degrees
  when 0
    [horizontal, vertical]
  when 90
    [vertical.map(&amp;:reverse), horizontal.reverse]
  when 180
    [horizontal.reverse.map(&amp;:reverse), vertical.reverse.map(&amp;:reverse)]
  when 270
    [vertical.reverse, horizontal.map(&amp;:reverse)]
  end
end

# ====== Setup ======

terrains = data.terrains
terrains = JSON.parse(terrains) if terrains.is_a?(String)

used_ids = data.terrain_pieces.map { |t| t["id"] }
available_terrains = terrains.reject { |t| used_ids.include?(t["id"]) }

# ====== Search for matching terrain ======

new_tile = nil
new_rotation = nil
found_match = false
t_row = data.direction[0]
t_col = data.direction[1]

available_terrains.shuffle.each do |candidate|  
  [0, 90, 180, 270].each do |rotation|
    rotated_cells = rotate_matrix(candidate["cells"], rotation)

    if rotated_cells[t_row][t_col] &amp;&amp; rotated_cells[t_row][t_col]["exit"] == true
      new_tile = candidate
      new_rotation = rotation
      found_match = true
      break
    end
  end
  break if found_match
end

raise "No compatible terrain found!" unless found_match

# ====== Place the terrain ======

rotated_horizontal, rotated_vertical = rotate_walls(new_tile["horizontal_walls"], new_tile["vertical_walls"], new_rotation)
rotated_cells_final = rotate_matrix(new_tile["cells"], new_rotation)

start_row = data.expand_rows.first
start_col = data.expand_cols.first
placement = ((start_row - 1) / 4 + 1) * 10 + ((start_col - 1) / 4 + 1)

data.current_terrain = {
  "id" =&gt; new_tile["id"],
  "home" =&gt; new_tile["home"],
  "rotation" =&gt; new_rotation,
  "placement" =&gt; placement,
  "horizontal_walls" =&gt; rotated_horizontal,
  "vertical_walls" =&gt; rotated_vertical
}

data.terrain_pieces ||= []
data.terrain_pieces &lt;&lt; data.current_terrain

grid = data.game_state

(0..3).each do |r|
  (0..3).each do |c|
    global_pos = [start_row + r, start_col + c]
    rotated_cell = rotated_cells_final[r][c]

    grid_row = global_pos[0] - 1
    grid_col = global_pos[1] - 1

    grid[grid_row][grid_col]["terrainID"] = new_tile["id"]
    grid[grid_row][grid_col]["effect"] = rotated_cell["effect"]
    grid[grid_row][grid_col]["occupied"] = nil
    grid[grid_row][grid_col]["exit"] = rotated_cell["exit"]
  end
end

data.game_state = grid</manipulate>
            <choose mode="exclusive">
              <alternative condition="data.robot_active == true">
                <choose mode="exclusive">
                  <alternative condition="data.current_terrain['rotation'] != 0">
                    <call id="a20" endpoint="rotatePiece">
                      <parameters>
                        <label>Make Robot Rotate Target Tile</label>
                        <method>:post</method>
                        <arguments>
                          <current_terrain>!data.current_terrain</current_terrain>
                        </arguments>
                      </parameters>
                      <annotations>
                        <_generic/>
                        <_timing>
                          <_timing_weight/>
                          <_timing_avg/>
                          <explanations/>
                        </_timing>
                        <_shifting>
                          <_shifting_type>Duration</_shifting_type>
                        </_shifting>
                        <_context_data_analysis>
                          <probes/>
                          <ips/>
                        </_context_data_analysis>
                        <report>
                          <url/>
                        </report>
                        <_notes>
                          <_notes_general/>
                        </_notes>
                      </annotations>
                      <documentation>
                        <input/>
                        <output/>
                        <implementation>
                          <description/>
                        </implementation>
                      </documentation>
                    </call>
                    <_probability>
                      <_probability_min/>
                      <_probability_max/>
                      <_probability_avg/>
                    </_probability>
                  </alternative>
                  <otherwise/>
                </choose>
                <call id="a22" endpoint="placePiece">
                  <parameters>
                    <label>Make Robot Place Target Tile to Grid</label>
                    <method>:post</method>
                    <arguments>
                      <current_terrain>!data.current_terrain</current_terrain>
                    </arguments>
                  </parameters>
                  <annotations>
                    <_generic/>
                    <_timing>
                      <_timing_weight/>
                      <_timing_avg/>
                      <explanations/>
                    </_timing>
                    <_shifting>
                      <_shifting_type>Duration</_shifting_type>
                    </_shifting>
                    <_context_data_analysis>
                      <probes/>
                      <ips/>
                    </_context_data_analysis>
                    <report>
                      <url/>
                    </report>
                    <_notes>
                      <_notes_general/>
                    </_notes>
                  </annotations>
                  <documentation>
                    <input/>
                    <output/>
                    <implementation>
                      <description/>
                    </implementation>
                  </documentation>
                </call>
                <_probability>
                  <_probability_min/>
                  <_probability_max/>
                  <_probability_avg/>
                </_probability>
              </alternative>
              <otherwise>
                <choose mode="exclusive">
                  <alternative condition="data.current_terrain['rotation'] != 0">
                    <call id="a23" endpoint="rotatePiece">
                      <parameters>
                        <label>Rotate Target Tile Message</label>
                        <method>:post</method>
                        <arguments>
                          <current_terrain>!data.current_terrain</current_terrain>
                        </arguments>
                      </parameters>
                      <annotations>
                        <_generic/>
                        <_timing>
                          <_timing_weight/>
                          <_timing_avg/>
                          <explanations/>
                        </_timing>
                        <_shifting>
                          <_shifting_type>Duration</_shifting_type>
                        </_shifting>
                        <_context_data_analysis>
                          <probes/>
                          <ips/>
                        </_context_data_analysis>
                        <report>
                          <url/>
                        </report>
                        <_notes>
                          <_notes_general/>
                        </_notes>
                      </annotations>
                      <documentation>
                        <input/>
                        <output/>
                        <implementation>
                          <description/>
                        </implementation>
                      </documentation>
                    </call>
                    <_probability>
                      <_probability_min/>
                      <_probability_max/>
                      <_probability_avg/>
                    </_probability>
                  </alternative>
                  <otherwise/>
                </choose>
                <call id="a24" endpoint="placePiece">
                  <parameters>
                    <label>Place Target Tile to Grid Message</label>
                    <method>:post</method>
                    <arguments>
                      <current_terrain>!data.current_terrain</current_terrain>
                    </arguments>
                  </parameters>
                  <annotations>
                    <_generic/>
                    <_timing>
                      <_timing_weight/>
                      <_timing_avg/>
                      <explanations/>
                    </_timing>
                    <_shifting>
                      <_shifting_type>Duration</_shifting_type>
                    </_shifting>
                    <_context_data_analysis>
                      <probes/>
                      <ips/>
                    </_context_data_analysis>
                    <report>
                      <url/>
                    </report>
                    <_notes>
                      <_notes_general/>
                    </_notes>
                  </annotations>
                  <documentation>
                    <input/>
                    <output/>
                    <implementation>
                      <description/>
                    </implementation>
                  </documentation>
                </call>
              </otherwise>
            </choose>
            <_probability>
              <_probability_min/>
              <_probability_max/>
              <_probability_avg/>
            </_probability>
          </alternative>
          <alternative condition="data.rotate_needed == true">
            <manipulate id="a21" label="Transpose Terrain">require 'json'

# ====== Helpers ======


def rotate_matrix(matrix, degrees)
  case degrees
  when 0 then matrix
  when 90 then matrix.transpose.map(&amp;:reverse)
  when 180 then matrix.map(&amp;:reverse).reverse
  when 270 then matrix.transpose.reverse
  end
end


def rotate_walls(horizontal, vertical, degrees)
  case degrees
  when 0
    [horizontal, vertical]
  when 90
    [vertical.map(&amp;:reverse), horizontal.reverse]
  when 180
    [horizontal.reverse.map(&amp;:reverse), vertical.reverse.map(&amp;:reverse)]
  when 270
    [vertical.reverse, horizontal.map(&amp;:reverse)]
  end
end


def rotate_coord(row, col, degrees)
  case degrees
  when 0 then [row, col]
  when 90 then [col, 3 - row]
  when 180 then [3 - row, 3 - col]
  when 270 then [3 - col, row]
  end
end


# ====== Rotate the Terrain Piece ======


# 1. Find the terrain to rotate
terrain_to_rotate = data.terrain_pieces.find { |t| t["id"] == data.rotate_terrain_id }
raise "Terrain to rotate not found!" unless terrain_to_rotate


# 2. Rotate its properties
terrain_to_rotate["rotation"] = (terrain_to_rotate["rotation"] + 90) % 360


rotated_horizontal, rotated_vertical = rotate_walls(
  terrain_to_rotate["horizontal_walls"],
  terrain_to_rotate["vertical_walls"],
  90
)


terrain_to_rotate["horizontal_walls"] = rotated_horizontal
terrain_to_rotate["vertical_walls"] = rotated_vertical


# 3. Set current_terrain
data.current_terrain = terrain_to_rotate.dup


# 4. Update terrain_pieces
data.terrain_pieces.map! do |t|
  t["id"] == data.rotate_terrain_id ? terrain_to_rotate : t
end


# ====== Rotate the Terrain Cells and Update Game State ======


# 5. Get starting row and col from placement
placement = data.current_terrain["placement"]


row_start = ((placement / 10) - 1) * 4
col_start = ((placement % 10) - 1) * 4


# 6. Fetch original terrain template
terrain_template = data.terrains.find { |t| t["id"] == data.current_terrain["id"] }
raise "Terrain template not found!" unless terrain_template


# 7. Rotate the cells
rotated_cells = rotate_matrix(terrain_template["cells"], data.current_terrain["rotation"])


# 8. Find players standing on the terrain before rotation
players_to_relocate = []


(0..3).each do |r|
  (0..3).each do |c|
    global_r = row_start + r
    global_c = col_start + c
    cell = data.game_state[global_r][global_c]
    if cell["occupied"]
      players_to_relocate &lt;&lt; { id: cell["occupied"], old_local: [r, c] }
    end
  end
end


# 9. Update game state cells to the new rotated cells
(0..3).each do |r|
  (0..3).each do |c|
    global_r = row_start + r
    global_c = col_start + c
    rotated_cell = rotated_cells[r][c]


    data.game_state[global_r][global_c]["terrainID"] = data.current_terrain["id"]
    data.game_state[global_r][global_c]["effect"] = rotated_cell["effect"]
    data.game_state[global_r][global_c]["exit"] = rotated_cell["exit"]
    data.game_state[global_r][global_c]["occupied"] = nil
  end
end


# 10. Move players to their rotated new positions
players_to_relocate.each do |player_info|
  old_r, old_c = player_info[:old_local]
  new_r, new_c = rotate_coord(old_r, old_c, 90)


  global_new_r = row_start + new_r
  global_new_c = col_start + new_c


  # Update game_state
  data.game_state[global_new_r][global_new_c]["occupied"] = player_info[:id]


  # Update player_data
  player = data.player_data.find { |p| p["id"] == player_info[:id] }
  if player
    player["position"] = [global_new_r + 1, global_new_c + 1]
  end
end</manipulate>
            <call id="a25" endpoint="rotatePiece">
              <parameters>
                <label>Rotate Target Tile Message</label>
                <method>:post</method>
                <arguments>
                  <current_terrain>!data.current_terrain</current_terrain>
                </arguments>
              </parameters>
              <annotations>
                <_generic/>
                <_timing>
                  <_timing_weight/>
                  <_timing_avg/>
                  <explanations/>
                </_timing>
                <_shifting>
                  <_shifting_type>Duration</_shifting_type>
                </_shifting>
                <_context_data_analysis>
                  <probes/>
                  <ips/>
                </_context_data_analysis>
                <report>
                  <url/>
                </report>
                <_notes>
                  <_notes_general/>
                </_notes>
              </annotations>
              <documentation>
                <input/>
                <output/>
                <implementation>
                  <description/>
                </implementation>
              </documentation>
            </call>
            <_probability>
              <_probability_min/>
              <_probability_max/>
              <_probability_avg/>
            </_probability>
          </alternative>
          <otherwise/>
        </choose>
        <manipulate id="a9" label="Did Game End?"># Assume player_data is provided as an array in the input
player_data = data.player_data || []

# First: Remove slain players (hp == 0)
player_data.reject! { |player| player["hp"] == 0 }

# Update the data.player_data with the cleaned list
data.player_data = player_data

required_effects = {
  "rogue" =&gt; "rogueE",
  "wizard" =&gt; "wizardE",
  "cleric" =&gt; "clericE",
  "barbarian" =&gt; "barbarianE"
}

# Check if there are no players left
if player_data.empty?
  data.end_game = true
else
  all_players_ready = true

  player_data.each do |player|
    expected_effect = required_effects[player["id"]]
    if player["effect"] != expected_effect || player["position"].nil?
      all_players_ready = false
      break
    end
  end

  data.end_game = all_players_ready
end

data.expand_needed = false
data.expand_rows = nil
data.expand_cols = nil
data.direction = []
data.rotate_needed = false
data.rotate_terrain_id = nil
data.current_terrain = nil</manipulate>
      </loop>
      <call id="a12" endpoint="gameEnd">
        <parameters>
          <label>End Game</label>
          <method>:post</method>
          <arguments>
            <player_data>!data.player_data</player_data>
          </arguments>
        </parameters>
        <annotations>
          <_generic/>
          <_timing>
            <_timing_weight/>
            <_timing_avg/>
            <explanations/>
          </_timing>
          <_shifting>
            <_shifting_type>Duration</_shifting_type>
          </_shifting>
          <_context_data_analysis>
            <probes/>
            <ips/>
          </_context_data_analysis>
          <report>
            <url/>
          </report>
          <_notes>
            <_notes_general/>
          </_notes>
        </annotations>
        <documentation>
          <input/>
          <output/>
          <implementation>
            <description/>
          </implementation>
        </documentation>
      </call>
    </description>
  </description>
  <transformation>
    <description type="copy"/>
    <dataelements type="none"/>
    <endpoints type="none"/>
  </transformation>
</testset>